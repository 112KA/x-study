import * as THREE from "three";

import { Card } from "./Card";
import { type NodePosition, Spline } from "./Spline";
import { N_CARDS } from "./Config";

export class Torch extends THREE.InstancedMesh {
	public splines: Spline[];
	public cards: Card[] = [];

	constructor() {
		super(
			new THREE.PlaneGeometry(20, 32),
			new THREE.MeshBasicMaterial({ side: THREE.DoubleSide }),
			N_CARDS,
		);

		this.splines = [];
		const splineDataList: NodePosition[][] = [
			[
				[-121.22034454345703, 2.7016075618610915e-15, -44.12059783935547],
				[-118.60533142089844, 77.74967956542969, 88.64125061035156],
				[-5.6220479011535645, 147.99949645996094, 165.3602600097656],
				[138.71640014648438, 218.24913024902344, 119.20043182373047],
				[197.5563049316406, 279.1819763183594, -13.154353141784668],
				[165.90980529785156, 325.5035400390625, -127.88285064697266],
				[70.17091369628906, 371.8829040527344, -209.49623107910156],
				[-61.60683822631836, 418.31097412109375, -224.07765197753906],
				[-184.82089233398438, 464.7393798828125, -159.19039916992188],
				[-254.02378845214844, 512.248046875, -26.92823028564453],
				[-234.46127319335938, 559.797668457031, 128.1539306640625],
				[-125.2269515991211, 607.3284912109375, 249.53024291992188],
				[36.66902542114258, 653.759338378906, 288.2797546386719],
				[198.77980041503906, 700.18994140625, 227.50184631347656],
				[302.9879150390625, 746.619873046875, 80.96428680419922],
				[307.46527099609375, 793.049072265625, -105.45557403564453],
				[203.39894104003906, 839.4783935546875, -268.1735534667969],
				[16.529239654541016, 886.676513671875, -347.6466064453125],
				[-190.925537109375, 934.3162841796875, -304.8663635253906],
				[-341.81427001953125, 981.9559936523438, -146.29945373535156],
				[-376.46978759765625, 1028.497802734375, 71.86215209960938],
				[-280.5782165527344, 1074.927734375, 277.6862487792969],
				[-80.33039093017578, 1121.3575439453125, 398.2971496582031],
				[159.7814178466797, 1167.787353515625, 385.93798828125],
				[357.4375, 1214.21728515625, 237.65145874023438],
				[440.6453857421875, 1261.1949462890625, -5.187469005584717],
				[368.3822326660156, 1308.834716796875, -262.3223571777344],
				[157.06344604492188, 1356.474609375, -436.9406433105469],
				[-118.08196258544922, 1403.2366943359375, -461.06036376953125],
				[-363.69683837890625, 1449.6661376953125, -324.4801025390625],
			],
			[
				[-305.74151611328125, 128.8505859375, -45.8232307434082],
				[-304.2523498535156, 200.8505096435547, 55.45675277709961],
				[-255.74215698242188, 272.8504333496094, 138.32525634765625],
				[-176.6912841796875, 344.8503723144531, 184.37425231933594],
				[-89.04601287841797, 416.85028076171875, 185.67173767089844],
				[-14.764448165893555, 488.8502197265625, 145.3780059814453],
				[28.9709415435791, 560.850158691406, 76.0026626586914],
				[33.08443069458008, 632.85009765625, -4.024153709411621],
				[-1.9185162782669067, 704.8499755859375, -74.65699005126953],
				[-66.40940856933594, 776.849914550781, -118.61982727050781],
			],
			[
				[-116.647216796875, -19.883012771606445, 183.12225341796875],
				[-15.458106994628906, 68.11689758300781, 130.35350036621094],
				[32.849998474121094, 156.11680603027344, 40.50905990600586],
				[23.718534469604492, 244.1167297363281, -50.576316833496094],
				[-28.847923278808594, 332.11663818359375, -114.38826751708984],
				[-100.90538787841797, 420.1165466308594, -136.4459991455078],
				[-167.66969299316406, 508.116455078125, -117.01591491699219],
				[-210.1795196533203, 596.1163940429688, -67.66216278076172],
				[-218.63729858398438, 684.116271972656, -6.158660888671875],
				[-193.087890625, 772.1162109375, 48.40803146362305],
			],
		];

		for (const splineData of splineDataList) {
			const spline = new Spline();
			spline.buildPoints(splineData);
			this.splines.unshift(spline);

			// spline.buildModel();
			// this.add(spline.model);
		}

		this.splines[0].endOffset = 600;

		this.splines[2].offsetAddScale = 0.3;
		this.splines[2].positionOffsetLength = 4;

		this.instanceMatrix.setUsage(THREE.DynamicDrawUsage); // will be updated every frame
		this.instanceColor = new THREE.InstancedBufferAttribute(
			new Float32Array(N_CARDS * 3),
			3,
		);

		for (let i = 0; i < N_CARDS; i++) {
			const card = new Card();
			const splineIndex = ~~(i / 800);
			this.splines[splineIndex].addCard(card);
			this.setColorAt(i, new THREE.Color(card.color));
			this.cards.push(card);
		}
		this.instanceColor.needsUpdate = true;
	}

	tick() {
		for (const [index, card] of this.cards.entries()) {
			card.tick();
			this.setMatrixAt(index, card.localMatrix);
		}
		this.instanceMatrix.needsUpdate = true;
	}
}
