{"version":3,"sources":["components/RawData.tsx","process/traversals/buildList.ts","process/traversals/buildParagraph.ts","process/traversals/embedLink.ts","process/Dom.ts","process/traversals/removeAttributes.ts","process/processor.ts","store/slice/text.ts","components/Process.tsx","App.tsx","reportWebVitals.ts","store/index.ts","index.tsx"],"names":["RawData","props","source","setSource","editor","useRef","config","Jodit","defaultOptions","style","height","Box","ref","value","onChange","newSource","onBlur","buildList","node","li","isListText","ul","nodeType","Node","TEXT_NODE","DOCUMENT_NODE","element","hasAttributes","attr","attributes","getNamedItem","remove","removeList","n","firstChild","nextSibling","className","document","createElement","insertBefore","appendChild","push","old","new","forEach","o","innerHTML","checkIsBlank","ret","textContent","test","buildParagraph","p","HTMLParagraphElement","embedLink","target","pattern","tagName","targetText","matches","matchAll","tmpNodes","matchedString","index","Array","from","match","createTextNode","slice","undefined","length","trim","HTMLAnchorElement","href","parent","parentNode","i","replaceChild","wrap","RegExp","removeAttributesTraverse","excludes","attrs","attrName","name","filter","removeAttribute","parser","DOMParser","serializer","XMLSerializer","parse","s","parseFromString","serialize","serializeToString","body","replace","textSlice","createSlice","initialState","tabIndex","processed","original","clean","reducers","setOriginalText","state","action","payload","xmlstring","removeAttributes","console","log","mainProcess","setCleanText","cleanProcess","setTabIndex","actions","TabPanel","children","other","role","hidden","id","aria-labelledby","a11yProps","useStyles","makeStyles","theme","container","flexGrow","backgroundColor","palette","background","paper","tabpanel","textarea","width","padding","Process","classes","originalText","useSelector","text","processedText","cleanText","dispatch","useDispatch","AppBar","position","color","Tabs","indicatorColor","textColor","event","newValue","aria-label","Tab","label","rows","readOnly","App","useState","React","open","setOpen","Container","rel","display","Button","variant","onClick","disabled","navigator","clipboard","writeText","Snackbar","autoHideDuration","onClose","Alert","severity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","textReducer","middlewares","getDefaultMiddleware","logger","store","configureStore","reducer","middleware","ReactDOM","render","StrictMode","getElementById"],"mappings":"yOAoDeA,EA1BC,SAACC,GAAiB,IACzBC,EAAqBD,EAArBC,OAAQC,EAAaF,EAAbE,UACVC,EAASC,iBAAO,MAEfC,EAASC,QAAMC,eAIrB,OAHAF,EAAOG,MAAQ,CACbC,OAAQ,SAGR,cAACC,EAAA,EAAD,UACE,cAAC,IAAD,CACEC,IAAKR,EACLE,OAAQA,EACRO,MAAOX,EACPY,SAAU,SAAAC,GACRZ,EAAUY,IAGZC,OAAQ,SAAAD,U,4DCWDE,EAvDG,SAAZA,EAAaC,GAAmD,IAElEC,EAF2BC,EAAsC,wDAC/DC,EAAqB,KAIzB,GACED,GACAF,EAAKI,WAAaC,KAAKC,WACvBN,EAAKI,WAAaC,KAAKE,cACvB,CACA,IAAMC,EAAmBR,EACzB,GAAIQ,EAAQC,gBAAiB,CAC3B,IAAMC,EAAoBF,EAAQG,WAAWC,aAAa,SAE1D,GAAoB,qBAAZ,OAAJF,QAAI,IAAJA,OAAA,EAAAA,EAAMf,OAER,YADAa,EAAQK,UAOd,IADA,IAAMC,EAAwC,GAExCC,EAAoBf,EAAKgB,WAC7BD,EACAA,EAAIA,EAAEE,YAENhB,EAAK,KAEe,qBAAhBc,EAAEG,WAGJjB,EAAKkB,SAASC,cAAc,MAEjB,OAAPjB,IACFA,EAAKgB,SAASC,cAAc,MAC5BpB,EAAKqB,aAAalB,EAAIY,GAEtBb,GAAa,GAEfC,EAAGmB,YAAYrB,GAEfa,EAAWS,KAAK,CAAEC,IAAKT,EAAGU,IAAKxB,KACtBc,EAAEX,WAAaC,KAAKC,YAE7BH,EAAK,MAEPJ,EAAUgB,EAAU,OAAPZ,GAAeD,GAE9BY,EAAWY,SAAQ,SAACC,GAClBA,EAAEF,IAAIG,UAAYD,EAAEH,IAAII,UACxBD,EAAEH,IAAIX,aCnDJgB,EAAe,SAAfA,EAAgB7B,GACpB,GAAIA,EAAKI,WAAaC,KAAKC,UAAW,CAEpC,IADA,IAAIwB,GAAM,EACDf,EAAiBf,EAAKgB,WAAYD,EAAGA,EAAIA,EAAEE,YAClDa,EAAMA,GAAOD,EAAad,GAE5B,OAAOe,EAEP,OACuB,OAArB9B,EAAK+B,aACL,oCAA4BC,KAAKhC,EAAK+B,cA+C7BE,EA3CQ,SAAjBA,EAAkBjC,GAKtB,IAJA,IAAIkC,EAAiC,KAE/BpB,EAAwB,GAErBC,EAAiBf,EAAKgB,WAAYD,EAAGA,EAAIA,EAAEE,YAC9CF,aAAaoB,qBAEVN,EAAad,IAgBhBmB,IAAMA,EAAEN,WAAa,MACrBM,EAAI,MAfM,OAANA,GACFA,EAAInB,GACFa,UAAY,OAASM,EAAEN,WAGzBM,EAAEN,WAAa,WAAab,EAAEa,UAG9Bd,EAAWS,KAAKR,KAYpBmB,IAAMA,EAAEN,WAAa,MACrBM,EAAI,MAEND,EAAelB,GAGjBmB,IAAMA,EAAEN,WAAa,MAErBd,EAAWY,SAAQ,SAAClB,GAClBA,EAAQK,aCnCGuB,EAhBG,SAAZA,EAAapC,GACbA,EAAKI,WAAaC,KAAKC,WCHT,SAAC+B,EAAcC,EAAiBC,GAClD,IAAMC,EAA4BH,EAAON,YACvCU,EAEa,OAAGD,QAAH,IAAGA,OAAH,EAAGA,EAAYE,SAASJ,GACrCK,EAAmB,GAErB,GAAIH,GAAcC,EAAS,CAMzB,IALA,IAEEzC,EACA4C,EAFEC,EAAgB,EAIpB,MALuCC,MAAMC,KAAKN,GAKlD,eAA8B,CAAzB,IAAIO,EAAK,KACRA,EAAMH,QAAUA,IAClB7C,EAAOmB,SAAS8B,eAAeT,EAAWU,MAAML,EAAOG,EAAMH,QAC7DF,EAASpB,KAAKvB,SAGImD,IAAhBH,EAAMH,QAEVA,EAAQG,EAAMH,MAAQG,EAAM,GAAGI,OAE/BR,EAAgBJ,EAAWU,MAAMF,EAAMH,MAAOA,GAAOQ,QACrDrD,EAAOmB,SAASC,cAAcmB,cACVe,oBAClBtD,EAAKuD,KAAOX,EACZ5C,EAAKqC,OAAS,UAEhBrC,EAAKsB,YAAYH,SAAS8B,eAAeL,IACzCD,EAASpB,KAAKvB,IAGZ6C,GAASL,EAAWY,SACtBpD,EAAOmB,SAAS8B,eAAeT,EAAWU,MAAML,IAChDF,EAASpB,KAAKvB,IAKhB,IAFA,IAAMwD,EAASnB,EAAOoB,WAEbC,EAAY,EAAGA,EAAIf,EAASS,OAAQM,IAC3C1D,EAAO2C,EAASe,GACN,IAANA,EACI,OAANF,QAAM,IAANA,KAAQG,aAAa3D,EAAMqC,GAErB,OAANmB,QAAM,IAANA,KAAQlC,YAAYtB,IDzCxB4D,CACE5D,EACA,IAAI6D,OAAO,qDAAsD,MACjE,KAGJ,IAAK,IAAI9C,EAAiBf,EAAKgB,WAAYD,EAAGA,EAAIA,EAAEE,YAE9C,UAAUe,KAAMhC,EAAiBuC,UAErCH,EAAUrB,IEWC+C,EAzBkB,SAA3BA,EACJ9D,GAEU,IADV+D,EACS,uDADY,GAErB,GACE/D,EAAKI,WAAaC,KAAKC,WACvBN,EAAKI,WAAaC,KAAKE,cACvB,CACA,IAAMC,EAAmBR,EACzB,GAAIQ,EAAQC,gBAEV,IADA,IAAMuD,EAAsBxD,EAAQG,WADT,aAGzB,IAAIsD,EAAWD,EAAMN,GAAGQ,KACoC,IAAxDH,EAASI,QAAO,SAACzD,GAAD,OAAUA,IAASuD,KAAUb,QAC/C5C,EAAQ4D,gBAAgBH,IAHnBP,EAAYM,EAAMZ,OAAS,EAAGM,GAAK,EAAGA,IAAM,IASzD,IAAK,IAAI3C,EAAiBf,EAAKgB,WAAYD,EAAGA,EAAIA,EAAEE,YAClD6C,EAAyB/C,EAAGgD,IChB1BM,EAAS,IAAIC,UACjBC,EAAa,IAAIC,cAEbC,EAAQ,SAACC,GACb,OAAOL,EAAOM,gBAAP,UAA0BD,GAAK,cAElCE,EAAY,SAACzD,GAGjB,OAFgBoD,EAAWM,kBAAkB1D,EAAS2D,MAE7CC,QADU,sBACE,KCGVC,EAAYC,YAAY,CAEnCf,KAAM,OACNgB,aAVqC,CACrCC,SAAU,EACVC,UAAW,GACXC,SAAU,GACVC,MAAO,IAOPC,SAAU,CACRC,gBAAiB,SAACC,EAAkBC,GAClCD,EAAMJ,SAAWK,EAAOC,QAExBF,EAAMH,MAAQ,GACdG,EAAML,UDEe,SAACQ,GAE1B,IAAIlB,EAAIkB,EAAUb,QAAQ,0BAAmB,IAEvC5D,EAAqBsD,EAAMC,GAoBjC,OAnBA3E,EAAUoB,GACVc,EAAed,GACf0E,EAAiB1E,EAAU,CAAC,SAC5BiB,EAAUjB,GAEV2E,QAAQC,IAAI,WAAY5E,IAQxBuD,GAHAA,GAHAA,EAAIE,EAAUzD,IAGR4D,QAAQ,qDAA8C,KAGtDA,QAAQ,cAAe,KAGvBA,QAAQ,+BAA+B,SAAC/B,GAAD,OAAWA,EAAQ,QCvB1CgD,CAAYP,EAAMJ,WAEtCY,aAAc,SAACR,EAAkBC,GACJ,IAAvBD,EAAMH,MAAMlC,SACdqC,EAAMH,MDbc,SAACM,GAC3B,IAAMzE,EAAqBsD,EAAMmB,GACjCC,EAAiB1E,GAEjB,IAAIuD,EAAIE,EAAUzD,GAIlB,OAHAuD,EAAIA,EAAEK,QAAQ,wDAAiD,KACzDA,QAAQ,gBAAgB,SAAC/B,GAAD,OAAWA,EAAQ,QCO7BkD,CAAaT,EAAMJ,YAGrCc,YAAa,SAACV,EAAkBC,GAC9BD,EAAMN,SAAWO,EAAOC,Y,EAMgCX,EAAUoB,QAAzDZ,E,EAAAA,gBAAiBS,E,EAAAA,aAAcE,E,EAAAA,YAC/BnB,IAAf,QChCA,SAASqB,EAAStH,GAAY,IACpBuH,EAAqCvH,EAArCuH,SAAU3G,EAA2BZ,EAA3BY,MAAOkD,EAAoB9D,EAApB8D,MAAU0D,EADR,YACkBxH,EADlB,8BAG3B,OACE,6CACEyH,KAAK,WACLC,OAAQ9G,IAAUkD,EAClB6D,GAAE,0BAAqB7D,GACvB8D,kBAAA,qBAA+B9D,IAC3B0D,GALN,aAOG5G,IAAUkD,GACT,cAACpD,EAAA,EAAD,UACG6G,OAaX,SAASM,EAAU/D,GACjB,MAAO,CACL6D,GAAG,cAAD,OAAgB7D,GAClB,gBAAgB,mBAAhB,OAAoCA,IAIxC,IAAMgE,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,UAAW,CACTC,SAAU,EACVC,gBAAiBH,EAAMI,QAAQC,WAAWC,OAE5CC,SAAU,CACR9H,OAAQ,SAEV+H,SAAU,CACRC,MAAO,OACPC,QAAS,OAgDEC,MA5Cf,WACE,IAAMC,EAAUd,IAEVe,EAAeC,aAAY,SAACpC,GAAD,OAAqBA,EAAMqC,KAAKzC,YAC/D0C,EAAgBF,aAAY,SAACpC,GAAD,OAAqBA,EAAMqC,KAAK1C,aAC5D4C,EAAYH,aAAY,SAACpC,GAAD,OAAqBA,EAAMqC,KAAKxC,SACxDH,EAAW0C,aAAY,SAACpC,GAAD,OAAqBA,EAAMqC,KAAK3C,YAElD8C,EAAWC,cAYlB,OACI,sBAAKhH,UAAWyG,EAAQX,UAAxB,UACE,cAACmB,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,cAAhC,SACE,eAACC,EAAA,EAAD,CAAM3I,MAAOwF,EACXoD,eAAe,UACfC,UAAU,UAAU5I,SAfT,SAAC6I,EAA6BC,GACjD5C,QAAQC,IAAI,eAAgB2C,GAEd,IAAXA,GACDT,EAAShC,EAAayC,IAExBT,EAAS9B,EAAYuC,KAS+BC,aAAW,sBAFzD,UAGE,cAACC,EAAA,EAAD,aAAKC,MAAM,aAAgBjC,EAAU,KACrC,cAACgC,EAAA,EAAD,aAAKC,MAAM,YAAejC,EAAU,KACpC,cAACgC,EAAA,EAAD,aAAKC,MAAM,SAAYjC,EAAU,UAGrC,cAACP,EAAD,CAAU1G,MAAOwF,EAAUtC,MAAO,EAAlC,SACE,0BAAU3B,UAAWyG,EAAQJ,SAAUrD,KAAK,gBAAgB4E,KAbvD,GAamEC,UAAQ,EAACpJ,MAAOoI,MAE1F,cAAC1B,EAAD,CAAU1G,MAAOwF,EAAUtC,MAAO,EAAlC,SACE,0BAAU3B,UAAWyG,EAAQJ,SAAUrD,KAAK,eAAe4E,KAhBtD,GAgBkEC,UAAQ,EAACpJ,MAAOiI,MAEzF,cAACvB,EAAD,CAAU1G,MAAOwF,EAAUtC,MAAO,EAAlC,SACE,0BAAU3B,UAAWyG,EAAQJ,SAAUrD,KAAK,YAAY4E,KAnBnD,GAmB+DC,UAAQ,EAACpJ,MAAOqI,U,oCCT/EgB,EA1EH,SAACjK,GAAe,IAAD,EACGkK,mBAAS,IADZ,mBAClBjK,EADkB,KACVC,EADU,OAELiK,IAAMD,UAAS,GAFV,mBAEtBE,EAFsB,KAEhBC,EAFgB,KAInBxB,EAAeC,aAAY,SAACpC,GAAD,OAAqBA,EAAMqC,KAAKzC,YAC/D0C,EAAgBF,aAAY,SAACpC,GAAD,OAAqBA,EAAMqC,KAAK1C,aAC5D4C,EAAYH,aAAY,SAACpC,GAAD,OAAqBA,EAAMqC,KAAKxC,SACxDH,EAAW0C,aAAY,SAACpC,GAAD,OAAqBA,EAAMqC,KAAK3C,YACnD8C,EAAWC,cAiCjB,OACE,cAACmB,EAAA,EAAD,CAAWnI,UAAU,OAArB,SAEI,qCACE,cAACzB,EAAA,EAAD,UACE,+BACE,yCACA,6BAAI,mBAAG8D,KAAK,qCAAqClB,OAAO,SAASiH,IAAI,aAAjE,uDAGR,eAAC7J,EAAA,EAAD,CAAKyB,UAAmC,IAAxB0G,EAAaxE,OAAe,GAAK,SAAjD,UACE,cAAC,EAAD,CAASpE,OAAQA,EAAQC,UAAWA,IACpC,eAACQ,EAAA,EAAD,CAAKyB,UAAU,OAAOqI,QAAQ,OAA9B,UACE,cAAC9J,EAAA,EAAD,UAAK,cAAC+J,EAAA,EAAD,CAAQC,QAAQ,YAAYpB,MAAM,UAAUqB,QA1ClC,WACzBzB,EAASzC,EAAgBxG,KAyC+D2K,SAA0B,IAAhB3K,EAAOoE,OAA1F,uBACL,cAAC3D,EAAA,EAAD,CAAKyB,UAAU,OAAf,SAAsB,cAACsI,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAvCrC,WACvBzK,EAAU,KAsCsB,2BAG1B,eAACQ,EAAA,EAAD,CAAKyB,UAAmC,IAAxB0G,EAAaxE,OAAe,GAAK,SAAjD,UACE,cAAC,EAAD,IACA,eAAC3D,EAAA,EAAD,CAAKyB,UAAU,OAAOqI,QAAQ,OAA9B,UACE,cAAC9J,EAAA,EAAD,UAAK,cAAC+J,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAzCrB,WACtBzB,EAASzC,EAAgB,MAwCV,oBACL,cAAC/F,EAAA,EAAD,CAAKyB,UAAU,OAAf,SAAsB,cAACsI,EAAA,EAAD,CAAQC,QAAQ,YAAYpB,MAAM,YAAYqB,QAtCxD,WACtB,IAAIhF,EAAY,GAChB,GAAGkF,UAAUC,UAAU,CACrB,OAAO1E,GACL,KAAK,EAAGT,EAAIqD,EAAgB,MAC5B,KAAK,EAAGrD,EAAIkD,EAAe,MAC3B,KAAK,EAAGlD,EAAIsD,EAEd4B,UAAUC,UAAUC,UAAUpF,GAEhC0E,GAAQ,IA4BwB,uBAExB,cAACW,EAAA,EAAD,CAAUZ,KAAMA,EAAMa,iBAAkB,IAAMC,QA3BpC,SAACxB,GACnBW,GAAQ,IA0BA,SACE,cAACc,EAAA,EAAD,CAAOC,SAAS,UAAhB,+BC9DCC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,iCCJDQ,EAAcC,YAAgB,CACzChD,KAAMiD,IAKFC,EAAW,sBAAOC,eAAP,CAA+BC,MAEnCC,EAAQC,YAAe,CAClCC,QAASR,EACTS,WAAYN,ICNdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJhK,SAASuK,eAAe,SAM1BtB,M","file":"static/js/main.8fdddd7f.chunk.js","sourcesContent":["import React, {useRef} from 'react';\n\nimport { Box } from \"@material-ui/core\";\n// import { setSource } from '../store/slice/text';\n// import { RootState } from '../store/';\n\n// 15. Jodit React\n// https://github.com/jodit/jodit-react\n\n// React Summernote\n// https://summernote.org/\n\n// 9. React Quill\n// https://zenoamaro.github.io/react-quill/\n\n// 1. TinyMCE React\n// https://www.tiny.cloud/docs/integrations/react/\nimport JoditEditor from \"jodit-react\";\nimport { Jodit } from 'jodit'\n\ntype Props = {\n  source: string;\n  setSource: React.Dispatch<React.SetStateAction<string>>;\n}\n\n\nconst RawData = (props:Props) => {\n  const {source, setSource} = props\n\tconst editor = useRef(null)\n  // console.log('Jodit', Jodit)\n  const config = Jodit.defaultOptions\n  config.style = {\n    height: '500px'\n  }\n  return (\n    <Box>\n      <JoditEditor\n        ref={editor}\n        config={config}\n        value={source}\n        onChange={newSource => {\n          setSource(newSource);\n          // console.log(newSource)\n        }}\n        onBlur={newSource => {\n        }}\n      />\n      {/* tabIndex={1} // tabIndex of textarea */}\n    </Box>\n  );\n}\n\nexport default RawData;","const buildList = (node: Node, isListText: boolean = false): void => {\n  let ul: Element | null = null,\n    li: Element | null;\n\n  //Remove list mark\n  if (\n    isListText &&\n    node.nodeType !== Node.TEXT_NODE &&\n    node.nodeType !== Node.DOCUMENT_NODE\n  ) {\n    const element: Element = node as Element;\n    if (element.hasAttributes()) {\n      const attr: Attr | null = element.attributes.getNamedItem(\"style\");\n      // console.log(\"removeListMark\", attr?.value);\n      if (attr?.value === \"mso-list:Ignore\") {\n        element.remove();\n        return;\n      }\n    }\n  }\n\n  const removeList: Record<string, Element>[] = [];\n  for (\n    var n: Element | null = node.firstChild as Element;\n    n;\n    n = n.nextSibling as Element\n  ) {\n    li = null;\n\n    if (n.className === \"MsoListParagraph\") {\n      // console.log(\"MsoListParagraph\", n, n.nodeType, flgList);\n\n      li = document.createElement(\"li\");\n\n      if (ul === null) {\n        ul = document.createElement(\"ul\");\n        node.insertBefore(ul, n);\n\n        isListText = true;\n      }\n      ul.appendChild(li);\n\n      removeList.push({ old: n, new: li });\n    } else if (n.nodeType !== Node.TEXT_NODE) {\n      // console.log(\"others\", n, n.nodeType, flgList);\n      ul = null;\n    }\n    buildList(n, ul !== null || isListText);\n  }\n  removeList.forEach((o: Record<string, Element>) => {\n    o.new.innerHTML = o.old.innerHTML;\n    o.old.remove();\n  });\n};\n\nexport default buildList;\n","const checkIsBlank = (node: Node): boolean => {\n  if (node.nodeType !== Node.TEXT_NODE) {\n    let ret = true;\n    for (var n: Node | null = node.firstChild; n; n = n.nextSibling) {\n      ret = ret && checkIsBlank(n);\n    }\n    return ret;\n  } else {\n    return (\n      node.textContent === null ||\n      /^( | |　|<br \\/>|&nbps;)*$/.test(node.textContent)\n    );\n  }\n};\nconst buildParagraph = (node: Node): void => {\n  let p: HTMLParagraphElement | null = null;\n\n  const removeList: Element[] = [];\n\n  for (var n: Node | null = node.firstChild; n; n = n.nextSibling) {\n    if (n instanceof HTMLParagraphElement) {\n      //空行でない場合\n      if (!checkIsBlank(n)) {\n        // console.log(\"HTMLParagraphElement not blank\");\n        if (p === null) {\n          p = n;\n          p.innerHTML = \"\\n\\t\" + p.innerHTML;\n        } else {\n          //改行タグを入れて連結\n          p.innerHTML += \"<br>\\n\\t\" + n.innerHTML;\n\n          //削除リストに追加\n          removeList.push(n);\n        }\n      }\n      //空行の場合処理終了\n      else {\n        // console.log(\"HTMLParagraphElement blank\");\n        p && (p.innerHTML += \"\\n\");\n        p = null;\n      }\n    }\n    //p要素でなければ処理終了\n    else {\n      p && (p.innerHTML += \"\\n\");\n      p = null;\n    }\n    buildParagraph(n);\n  }\n\n  p && (p.innerHTML += \"\\n\");\n\n  removeList.forEach((element: Element) => {\n    element.remove();\n  });\n};\n\nexport default buildParagraph;\n","import { wrap } from \"../Dom\";\n\nconst embedLink = (node: Node): void => {\n  if (node.nodeType === Node.TEXT_NODE) {\n    wrap(\n      node as Text,\n      new RegExp(\"http(s)?://([\\\\w-]+\\\\.)+[\\\\w-]+(/[\\\\w- ./?%&=~]*)?\", \"gi\"),\n      \"a\"\n    );\n  }\n  for (var n: Node | null = node.firstChild; n; n = n.nextSibling) {\n    // console.log((node as Element).tagName);\n    if (/^(A|a)$/.test((node as Element).tagName)) continue;\n\n    embedLink(n);\n  }\n};\n\nexport default embedLink;\n","export const wrap = (target: Text, pattern: RegExp, tagName: string) => {\n  const targetText: string | null = target.textContent,\n    matches:\n      | IterableIterator<RegExpMatchArray>\n      | undefined = targetText?.matchAll(pattern),\n    tmpNodes: Node[] = [];\n\n  if (targetText && matches) {\n    const matchArray: RegExpMatchArray[] = Array.from(matches);\n    let index: number = 0,\n      node: Node,\n      matchedString: string;\n\n    for (let match of matchArray) {\n      if (match.index !== index) {\n        node = document.createTextNode(targetText.slice(index, match.index));\n        tmpNodes.push(node);\n      }\n\n      if (match.index === undefined) continue;\n\n      index = match.index + match[0].length;\n\n      matchedString = targetText.slice(match.index, index).trim();\n      node = document.createElement(tagName);\n      if (node instanceof HTMLAnchorElement) {\n        node.href = matchedString;\n        node.target = \"_blank\";\n      }\n      node.appendChild(document.createTextNode(matchedString));\n      tmpNodes.push(node);\n    }\n\n    if (index >= targetText.length) {\n      node = document.createTextNode(targetText.slice(index));\n      tmpNodes.push(node);\n    }\n\n    const parent = target.parentNode;\n\n    for (let i: number = 0; i < tmpNodes.length; i++) {\n      node = tmpNodes[i];\n      if (i === 0) {\n        parent?.replaceChild(node, target);\n      } else {\n        parent?.appendChild(node);\n      }\n    }\n  }\n};\n","const removeAttributesTraverse = (\n  node: Node,\n  excludes: string[] = []\n): void => {\n  if (\n    node.nodeType !== Node.TEXT_NODE &&\n    node.nodeType !== Node.DOCUMENT_NODE\n  ) {\n    const element: Element = node as Element;\n    if (element.hasAttributes()) {\n      const attrs: NamedNodeMap = element.attributes;\n      for (var i: number = attrs.length - 1; i >= 0; i--) {\n        let attrName = attrs[i].name;\n        if (excludes.filter((attr) => attr === attrName).length === 0) {\n          element.removeAttribute(attrName);\n        }\n      }\n    }\n  }\n\n  for (var n: Node | null = node.firstChild; n; n = n.nextSibling) {\n    removeAttributesTraverse(n, excludes);\n  }\n};\n\nexport default removeAttributesTraverse;\n","import buildList from \"./traversals/buildList\";\nimport buildParagraph from \"./traversals/buildParagraph\";\nimport embedLink from \"./traversals/embedLink\";\nimport removeAttributes from \"./traversals/removeAttributes\";\n\nconst parser = new DOMParser(),\n  serializer = new XMLSerializer();\n\nconst parse = (s: string): Document => {\n  return parser.parseFromString(`${s}`, \"text/html\");\n};\nconst serialize = (document: Document): string => {\n  let s: string = serializer.serializeToString(document.body);\n  const re: RegExp = /<\\/?body(.|\\n)*?>/gi;\n  return s.replace(re, \"\");\n};\n\nexport const cleanProcess = (xmlstring: string): string => {\n  const document: Document = parse(xmlstring);\n  removeAttributes(document);\n\n  let s = serialize(document);\n  s = s.replace(/<p>( | |　|<br \\/>|<span>|<\\/span>)*?<\\/p>\\n/gi, \"\"); //空行なくす\n  s = s.replace(/<\\/h[1-6]>/gi, (match) => match + \"\\n\");\n  // s = s.replace(/<\\/p>/gi, \"</p>\\n\");\n  return s;\n};\n\nexport const mainProcess = (xmlstring: string): string => {\n  //改行を消す\n  let s = xmlstring.replace(/\\n(\\t| | |　)*/gi, \"\");\n\n  const document: Document = parse(s);\n  buildList(document);\n  buildParagraph(document);\n  removeAttributes(document, [\"href\"]);\n  embedLink(document);\n\n  console.log(\"document\", document);\n\n  s = serialize(document);\n\n  //空行なくす\n  s = s.replace(/<p>( | |　|<br \\/>|<span>|<\\/span>)*<\\/p>/gi, \"\");\n\n  //spanタグを消す\n  s = s.replace(/<\\/?span>/gi, \"\");\n\n  //改行を入れる\n  s = s.replace(/<(ul|\\/(h[1-6]|ul|li|p))>/gi, (match) => match + \"\\n\");\n  // s = s.replace(/<\\/p>/gi, \"</p>\\n\");\n\n  return s;\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { cleanProcess, mainProcess } from \"../../process/processor\";\n\nexport type TextState = {\n  tabIndex: number;\n  processed: string;\n  original: string;\n  clean: string;\n};\n\nexport const initialState: TextState = {\n  tabIndex: 0,\n  processed: \"\",\n  original: \"\",\n  clean: \"\",\n};\n\nexport const textSlice = createSlice({\n  // slice名\n  name: \"text\",\n  initialState,\n  reducers: {\n    setOriginalText: (state: TextState, action: PayloadAction<string>) => {\n      state.original = action.payload;\n      // console.log(\"setOriginalText\", action.payload);\n      state.clean = \"\";\n      state.processed = mainProcess(state.original);\n    },\n    setCleanText: (state: TextState, action: PayloadAction<string>) => {\n      if (state.clean.length === 0) {\n        state.clean = cleanProcess(state.original);\n      }\n    },\n    setTabIndex: (state: TextState, action: PayloadAction<number>) => {\n      state.tabIndex = action.payload;\n    },\n  },\n});\n\n// 外からインポートするためにactionとreducerをエクスポートする\nexport const { setOriginalText, setCleanText, setTabIndex } = textSlice.actions;\nexport default textSlice.reducer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { AppBar, Tabs, Tab, Box, /*TextareaAutosize,*/makeStyles } from \"@material-ui/core\";\n\n\nimport { RootState } from '../store/';\nimport { setTabIndex, setCleanText } from '../store/slice/text';\n\nfunction TabPanel(props:any) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box>\n          {children}\n        </Box>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index:number) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n  tabpanel: {\n    height: \"500px\"\n  },\n  textarea: {\n    width: '100%',\n    padding: 0\n  }\n}));\n\nfunction Process() {\n  const classes = useStyles();\n  \n  const originalText = useSelector((state:RootState) => state.text.original),\n    processedText = useSelector((state:RootState) => state.text.processed),\n    cleanText = useSelector((state:RootState) => state.text.clean),\n    tabIndex = useSelector((state:RootState) => state.text.tabIndex);\n  \n   const dispatch = useDispatch();\n\n  const handleChange = (event:React.ChangeEvent<{}>, newValue:any) => {\n    console.log('handleChange', newValue)\n    // setTabIndex(newValue);\n    if(newValue===2) {\n      dispatch(setCleanText(newValue));\n    }\n    dispatch(setTabIndex(newValue));\n  };\n\n  const rows = 30;\n  return (\n      <div className={classes.container}>\n        <AppBar position=\"static\" color=\"transparent\">\n          <Tabs value={tabIndex}\n            indicatorColor=\"primary\"\n            textColor=\"primary\" onChange={handleChange} aria-label=\"simple tabs example\">\n            <Tab label=\"Processed\" {...a11yProps(0)} />\n            <Tab label=\"Original\" {...a11yProps(1)} />\n            <Tab label=\"Clean\" {...a11yProps(2)} />\n          </Tabs>\n        </AppBar>\n        <TabPanel value={tabIndex} index={0}>\n          <textarea className={classes.textarea} name=\"processedText\" rows={rows} readOnly value={processedText}></textarea>\n        </TabPanel>\n        <TabPanel value={tabIndex} index={1}>\n          <textarea className={classes.textarea} name=\"originalText\" rows={rows} readOnly value={originalText}></textarea>\n        </TabPanel>\n        <TabPanel value={tabIndex} index={2}>\n          <textarea className={classes.textarea} name=\"cleanText\" rows={rows} readOnly value={cleanText}></textarea>\n        </TabPanel>\n      </div>\n  );\n}\n\nexport default Process;","import React , {useState, SyntheticEvent} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport RawData from './components/RawData'\nimport Process from './components/Process'\nimport { Container, Box, Button, Snackbar } from \"@material-ui/core\";\nimport {Alert} from '@material-ui/lab';\n\nimport { setOriginalText } from './store/slice/text';\nimport { RootState } from './store/';\n\nconst App = (props:any) => {\n  const [source, setSource] = useState(''), \n    [open, setOpen] = React.useState(false);\n\n  const originalText = useSelector((state:RootState) => state.text.original),\n    processedText = useSelector((state:RootState) => state.text.processed),\n    cleanText = useSelector((state:RootState) => state.text.clean),\n    tabIndex = useSelector((state:RootState) => state.text.tabIndex);\n  const dispatch = useDispatch();\n\n  // console.log(\"originalText\", originalText, originalText.length)\n\n  const handleClickConvert = () => {\n    dispatch(setOriginalText(source))\n  }\n\n  const handleClickClear = () => {\n    setSource('');\n  }\n\n  const handleClickBack = () => {\n    dispatch(setOriginalText(''))\n  }\n\n  const handleClickCopy = () => {\n    let s: string = '';\n    if(navigator.clipboard){\n      switch(tabIndex) {\n        case 0: s = processedText;  break;\n        case 1: s = originalText;  break;\n        case 2: s = cleanText;  break;\n      }\n      navigator.clipboard.writeText(s);\n    }\n    setOpen(true);\n  }\n\n  const handleClose = (event:SyntheticEvent<Element, Event>) => {\n    setOpen(false);\n  };\n\n  return (\n    <Container className=\"py-8\">\n      {\n        <>\n          <Box>\n            <dl>\n              <dt>GitHub:</dt>\n              <dd><a href=\"https://github.com/112KA/word2html\" target=\"_blank\" rel=\"noreferrer\">https://github.com/112KA/word2html</a></dd>\n            </dl>\n          </Box>\n          <Box className={originalText.length === 0 ? '' : 'hidden'}>\n            <RawData source={source} setSource={setSource}/>\n            <Box className=\"mt-4\" display=\"flex\">\n              <Box><Button variant=\"contained\" color=\"primary\" onClick={handleClickConvert} disabled={source.length===0}>convert</Button></Box>\n              <Box className=\"ml-2\"><Button variant=\"contained\" onClick={handleClickClear}>clear</Button></Box>\n            </Box>\n          </Box>\n          <Box className={originalText.length !== 0 ? '' : 'hidden'}>\n            <Process />\n            <Box className=\"mt-4\" display=\"flex\">\n              <Box><Button variant=\"contained\" onClick={handleClickBack}>back</Button></Box>\n              <Box className=\"ml-2\"><Button variant=\"contained\" color=\"secondary\" onClick={handleClickCopy}>copy</Button></Box>\n            </Box>\n            <Snackbar open={open} autoHideDuration={3000} onClose={handleClose}>\n              <Alert severity=\"success\">Copied</Alert>\n            </Snackbar>\n          </Box>\n        </>\n      }\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers } from \"redux\";\nimport logger from \"redux-logger\";\nimport { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport textReducer from \"./slice/text\";\n\nexport const rootReducer = combineReducers({\n  text: textReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nconst middlewares = [...getDefaultMiddleware(), logger];\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: middlewares,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { Provider } from 'react-redux'\nimport {store} from './store/index'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}